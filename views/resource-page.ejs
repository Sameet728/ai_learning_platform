<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>ðŸ“˜ Personalized Learning Plan: <%= topic %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&family=Montserrat:wght@700&display=swap" rel="stylesheet">
  <style>
    /* Global Styles */
    :root {
      --primary-color: #5b6df5;
      --primary-color-dark: #4a56d4;
      --secondary-color: #10b981;
      --accent-color: #f59e0b;
      --text-color: #2d3748;
      --text-color-light: #4a5568;
      --bg-color: #f8fafc;
      --card-bg-color: #ffffff;
      --border-color: #e2e8f0;
      --nav-bg: #ffffff;
      --nav-shadow: 0 2px 10px rgba(0,0,0,0.08);
      --link-color: #3b82f6;
      --link-hover: #2563eb;
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --error-color: #ef4444;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      line-height: 1.7;
      padding-top: 0;
    }

    /* Navbar Styles */
    .navbar {
      background: var(--nav-bg);
      box-shadow: var(--nav-shadow);
      padding: 1rem 0;
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }

    .nav-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .logo {
      font-size: 1.5rem;
      font-weight: bold;
      color: var(--primary-color);
      text-decoration: none;
      font-family: 'Montserrat', sans-serif;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .logo i {
      font-size: 1.3rem;
    }

    .nav-links {
      display: flex;
      gap: 1.5rem;
      align-items: center;
    }

    .nav-links a {
      text-decoration: none;
      color: var(--text-color);
      transition: all 0.3s ease;
      font-weight: 500;
      font-size: 0.95rem;
    }

    .nav-links a:hover {
      color: var(--primary-color);
    }

    .mobile-menu-btn {
      display: none;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--text-color);
    }

    .btn {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 0.6rem 1.2rem;
      border-radius: 8px;
      text-decoration: none;
      transition: all 0.3s ease;
      font-weight: 500;
      font-size: 0.95rem;
    }

    .btn-primary {
      background: var(--primary-color);
      color: white;
    }

    .btn-primary:hover {
      background: var(--primary-color-dark);
      transform: translateY(-1px);
    }

    .btn-outline {
      border: 2px solid var(--primary-color);
      color: var(--primary-color);
      background: transparent;
    }

    .btn-outline:hover {
      background: rgba(91, 109, 245, 0.1);
    }

    /* Learning Plan Content Styles */
    .content-container {
      max-width: 900px;
      margin: 40px auto;
      padding: 50px;
      background-color: var(--card-bg-color);
      border-radius: 16px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
      border: 1px solid var(--border-color);
    }

    h1 {
      font-family: 'Montserrat', sans-serif;
      text-align: center;
      color: var(--primary-color);
      font-size: 2.8rem;
      margin: 0 0 15px 0;
      line-height: 1.2;
    }

    .topic-display {
      text-align: center;
      color: var(--text-color-light);
      font-size: 1.1rem;
      margin-bottom: 40px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
    }

    .topic-display strong {
      color: var(--text-color);
      font-weight: 700;
      background: rgba(91, 109, 245, 0.1);
      padding: 8px 16px;
      border-radius: 50px;
      font-size: 1.2rem;
    }

    .score-display {
      display: flex;
      gap: 10px;
      align-items: center;
      background: rgba(16, 185, 129, 0.1);
      padding: 8px 16px;
      border-radius: 50px;
      color: var(--success-color);
      font-weight: 600;
    }

    .section {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid var(--border-color);
    }

    .section:first-of-type {
      border-top: none;
      padding-top: 0;
      margin-top: 0;
    }

    .section h2 {
      font-family: 'Montserrat', sans-serif;
      color: var(--primary-color);
      margin-bottom: 20px;
      font-size: 1.8rem;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .section h2 i {
      font-size: 1.5rem;
      color: var(--accent-color);
    }

    .section p {
      font-size: 1.05rem;
      color: var(--text-color);
      line-height: 1.8;
      margin-bottom: 20px;
      white-space: pre-line;
    }

    /* Enhanced Link Styling */
    .section p a {
      color: var(--link-color);
      text-decoration: none;
      font-weight: 500;
      transition: all 0.2s ease;
      position: relative;
      padding: 2px 4px;
      border-radius: 4px;
    }

    .section p a:hover {
      color: var(--link-hover);
      background: rgba(59, 130, 246, 0.1);
    }

    .section p a::after {
      content: "â†—";
      font-size: 0.8em;
      margin-left: 2px;
      opacity: 0.7;
    }

    /* Link Cards */
    .link-card {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 15px;
      border-radius: 10px;
      background: var(--bg-color);
      border: 1px solid var(--border-color);
      margin-bottom: 15px;
      transition: all 0.3s ease;
      text-decoration: none;
      color: var(--text-color);
    }

    .link-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      border-color: var(--primary-color);
    }

    .link-card-icon {
      flex-shrink: 0;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(91, 109, 245, 0.1);
      border-radius: 8px;
      color: var(--primary-color);
      font-size: 1.2rem;
    }

    .link-card-content {
      flex: 1;
    }

    .link-card-title {
      font-weight: 600;
      margin-bottom: 4px;
      color: var(--primary-color);
    }

    .link-card-url {
      font-size: 0.85rem;
      color: var(--text-color-light);
      word-break: break-all;
    }

    /* Problem Boxes */
    .problem-box {
      background: rgba(245, 158, 11, 0.05);
      border-left: 4px solid var(--accent-color);
      padding: 15px;
      border-radius: 0 8px 8px 0;
      margin: 15px 0;
    }

    .problem-box-title {
      font-weight: 600;
      color: var(--accent-color);
      margin-bottom: 8px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    /* Button Container */
    .btn-container {
      text-align: center;
      margin-top: 50px;
      padding-top: 30px;
      border-top: 1px solid var(--border-color);
      display: flex;
      justify-content: center;
      gap: 15px;
    }

    .btn-plan {
      display: inline-flex;
      align-items: center;
      gap: 10px;
      background-color: var(--primary-color);
      color: white;
      padding: 14px 28px;
      border: none;
      border-radius: 10px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      box-shadow: 0 4px 15px rgba(79, 70, 229, 0.15);
    }

    .btn-plan:hover {
      background-color: var(--primary-color-dark);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(79, 70, 229, 0.25);
    }

    .btn-plan-secondary {
      background: white;
      color: var(--primary-color);
      border: 2px solid var(--primary-color);
    }

    .btn-plan-secondary:hover {
      background: rgba(91, 109, 245, 0.1);
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      .mobile-menu-btn {
        display: block;
      }
      
      .nav-links {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background: var(--nav-bg);
        flex-direction: column;
        gap: 0;
        padding: 1rem 0;
        box-shadow: var(--nav-shadow);
        display: none;
      }
      
      .nav-links.active {
        display: flex;
      }
      
      .nav-links a {
        padding: 1rem;
        width: 100%;
        text-align: center;
      }
      
      .nav-links .btn {
        margin: 0.5rem auto;
        display: block;
        width: 80%;
        text-align: center;
      }
      
      .content-container {
        padding: 30px;
      }
      
      h1 {
        font-size: 2.2rem;
      }
      
      .section h2 {
        font-size: 1.5rem;
      }

      .btn-container {
        flex-direction: column;
        gap: 10px;
      }

      .btn-plan {
        width: 100%;
        justify-content: center;
      }
    }

    @media (max-width: 480px) {
      h1 {
        font-size: 1.8rem;
      }
      
      .section h2 {
        font-size: 1.3rem;
      }
      
      .content-container {
        padding: 25px 20px;
        margin: 20px 0;
        border-radius: 0;
        border-left: none;
        border-right: none;
      }
      
      .btn-plan {
        padding: 12px 24px;
        font-size: 1rem;
      }

      .topic-display strong {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar">
    <div class="container nav-container">
      <a href="/" class="logo"><i class="fas fa-brain"></i> LearnSmart</a>
      <button class="mobile-menu-btn" id="mobileMenuBtn">
        <i class="fas fa-bars"></i>
      </button>
      <div class="nav-links" id="navLinks">
        <a href="/notes">Notes</a>
        <a href="/todo">To-Do</a>
        <% if (currentUser) { %>
          <a href="/dashboard" class="btn btn-primary"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
          <a href="/logout" class="btn btn-outline">Logout</a>
        <% } else { %>
          <a href="/login" class="btn btn-outline">Login</a>
        <% } %>
      </div>
    </div>
  </nav>

  <!-- Learning Plan Content -->
  <div class="container">
    <main class="content-container" role="main">
      <h1>ðŸ“˜ Personalized Learning Plan</h1>
      <div class="topic-display">
        <span>Topic: <strong><%= topic.toUpperCase() %></strong></span>
        <% if (typeof percentageScore !== 'undefined') { %>
          <div class="score-display">
            <i class="fas fa-chart-line"></i>
            <span>Quiz Score: <%= percentageScore %>%</span>
          </div>
        <% } %>
      </div>

      <%
        // Process the resource content
        const urlRegex = /(https?:\/\/[^\s"'\(\)<>]+)/g;
        const sections = resource.split(/\*\*(.*?)\*\*/g);
        
        // Function to detect YouTube links
        const isYouTubeLink = (url) => {
          return url.includes('youtube.com') || url.includes('youtu.be');
        };
        
        // Function to extract domain from URL
        const getDomain = (url) => {
          try {
            const domain = new URL(url).hostname.replace('www.', '');
            return domain.split('.')[0];
          } catch {
            return 'resource';
          }
        };
        
        // Function to get icon for domain
        const getDomainIcon = (url) => {
          if (isYouTubeLink(url)) return 'fab fa-youtube';
          if (url.includes('github.com')) return 'fab fa-github';
          if (url.includes('medium.com')) return 'fab fa-medium';
          if (url.includes('wikipedia.org')) return 'fab fa-wikipedia-w';
          return 'fas fa-external-link-alt';
        };
      %>

      <% for (let i = 1; i < sections.length; i += 2) { %>
        <% const title = sections[i].trim(); %>
        <% let content = sections[i+1] ? sections[i+1].trim() : ''; %>

        <% if (title && content) { %>
          <section class="section">
            <h2>
              <% if (title.includes('Performance')) { %>
                <i class="fas fa-chart-pie"></i>
              <% } else if (title.includes('Mistakes')) { %>
                <i class="fas fa-exclamation-triangle"></i>
              <% } else if (title.includes('Resources')) { %>
                <i class="fas fa-book-open"></i>
              <% } else if (title.includes('Practice')) { %>
                <i class="fas fa-pencil-alt"></i>
              <% } else if (title.includes('Next')) { %>
                <i class="fas fa-arrow-right"></i>
              <% } else { %>
                <i class="fas fa-star"></i>
              <% } %>
              <%= title %>
            </h2>
            
            <% 
              // Convert URLs to link cards
              const urlMatches = content.match(urlRegex) || [];
              const uniqueUrls = [...new Set(urlMatches)];
              
              uniqueUrls.forEach(url => {
                const domain = getDomain(url);
                const icon = getDomainIcon(url);
                const title = domain.charAt(0).toUpperCase() + domain.slice(1) + ' Resource';
                
                const linkCard = `
                  <a href="${url}" target="_blank" rel="noopener noreferrer" class="link-card">
                    <div class="link-card-icon">
                      <i class="${icon}"></i>
                    </div>
                    <div class="link-card-content">
                      <div class="link-card-title">${title}</div>
                      <div class="link-card-url">${url}</div>
                    </div>
                  </a>
                `;
                
                content = content.replace(url, linkCard);
              });
              
              // Convert problem statements to boxes
              content = content.replace(/ðŸ”¹\s*\*\*(.*?)\*\*:\s*(.*?)(?=\nðŸ”¹|\n\n|$)/gs, (match, problemTitle, problemContent) => {
                return `
                  <div class="problem-box">
                    <div class="problem-box-title">
                      <i class="fas fa-question-circle"></i>
                      ${problemTitle}
                    </div>
                    <div>${problemContent}</div>
                  </div>
                `;
              });
            %>
            
            <p><%- content %></p>
          </section>
        <% } %>
      <% } %>

      <div class="btn-container">
        <a href="/quiz" class="btn-plan"><i class="fas fa-redo"></i> Take Another Quiz</a>
        <% if (currentUser) { %>
          <a href="/dashboard" class="btn-plan btn-plan-secondary"><i class="fas fa-tachometer-alt"></i> Back to Dashboard</a>
        <% } %>
      </div>
    </main>
  </div>

  <script>
    // Mobile menu toggle
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const navLinks = document.getElementById('navLinks');
    
    mobileMenuBtn.addEventListener('click', () => {
      navLinks.classList.toggle('active');
    });
    
    // Close menu when clicking on a link (for mobile)
    document.querySelectorAll('.nav-links a').forEach(link => {
      link.addEventListener('click', () => {
        if (window.innerWidth <= 768) {
          navLinks.classList.remove('active');
        }
      });
    });

    // Add link preview functionality
    document.addEventListener('DOMContentLoaded', () => {
      // This would be where you'd add link preview API calls if you wanted
      // For now we're just using the enhanced styling
    });
  </script>
</body>
</html>