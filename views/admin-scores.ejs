<!DOCTYPE html>
<html>
<head>
  <title>Admin - Student Scores</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f5f5f5;
    }
    .container {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .filters {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
    }
    .filter-row {
      display: flex;
      gap: 20px;
      margin-bottom: 15px;
      align-items: center;
      flex-wrap: wrap;
    }
    .filter-group {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }
    label {
      font-weight: bold;
      color: #333;
    }
    select, input {
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }
    select {
      min-width: 150px;
    }
    button {
      background: #007bff;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
    button:hover {
      background: #0056b3;
    }
    .charts-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin: 20px 0;
    }
    .chart-box {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
    }
    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    th {
      background-color: #f8f9fa;
      font-weight: bold;
    }
    tr:hover {
      background-color: #f5f5f5;
    }
    .comparison-section {
      margin-top: 30px;
      padding: 20px;
      background: #e8f4fd;
      border-radius: 8px;
    }
    .selection-controls {
      background: white;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      border: 1px solid #ddd;
    }
    .dropdown-section {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }
    .dropdown-group {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }
    .selected-items {
      margin-bottom: 20px;
    }
    .selected-group {
      margin-bottom: 15px;
    }
    .selected-group h4 {
      margin: 0 0 10px 0;
      color: #333;
      font-size: 16px;
    }
    .tags-container {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      min-height: 35px;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background: #f8f9fa;
    }
    .tag {
      background: #007bff;
      color: white;
      padding: 5px 10px;
      border-radius: 15px;
      font-size: 14px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .tag.subject {
      background: #28a745;
    }
    .tag .remove-btn {
      background: rgba(255,255,255,0.3);
      border: none;
      color: white;
      border-radius: 50%;
      width: 18px;
      height: 18px;
      font-size: 12px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .tag .remove-btn:hover {
      background: rgba(255,255,255,0.5);
    }
    .action-buttons {
      display: flex;
      gap: 10px;
    }
    .action-buttons button {
      padding: 10px 20px;
    }
    .leaderboard {
      background: #fff3cd;
      padding: 20px;
      border-radius: 8px;
      margin: 20px 0;
    }
    .no-data {
      text-align: center;
      color: #666;
      font-style: italic;
      padding: 40px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üìä Student Performance Dashboard</h1>
    
    <!-- Enhanced Filters -->
    <div class="filters">
      <form method="GET" action="/admin/scores" id="filterForm">
        <div class="filter-row">
          <div class="filter-group">
            <label for="topicSelect">Filter by Topic:</label>
            <select name="topic" id="topicSelect" onchange="updateCharts()">
              <option value="">All Topics</option>
              <% 
              const uniqueTopics = [...new Set(scores.map(s => s.topic))];
              uniqueTopics.forEach(topic => { 
              %>
                <option value="<%= topic %>" <%= topic === (topic || '') ? 'selected' : '' %>>
                  <%= topic %>
                </option>
              <% }) %>
            </select>
          </div>
          
          <div class="filter-group">
            <label for="studentSelect">Filter by Student:</label>
            <select name="student" id="studentSelect" onchange="updateCharts()">
              <option value="">All Students</option>
              <% 
              const uniqueStudents = [...new Set(scores.map(s => s.username))];
              uniqueStudents.forEach(student => { 
              %>
                <option value="<%= student %>" <%= student === (student || '') ? 'selected' : '' %>>
                  <%= student %>
                </option>
              <% }) %>
            </select>
          </div>
          
          <button type="submit">Apply Filter</button>
        </div>
      </form>
    </div>

    <% if (scores.length > 0) { %>
      <!-- Charts Section -->
      <div class="charts-container">
        <div class="chart-box">
          <h3>üìà Average Scores by Student</h3>
          <canvas id="scoreChart" width="400" height="200"></canvas>
        </div>
        <div class="chart-box">
          <h3>üìä Topic Performance</h3>
          <canvas id="topicChart" width="400" height="200"></canvas>
        </div>
      </div>

      <!-- Student Comparison Section -->
      <div class="comparison-section">
        <h3>üîç Compare Students & Subjects</h3>
        
        <!-- Selection Controls -->
        <div class="selection-controls">
          <div class="dropdown-section">
            <div class="dropdown-group">
              <label>Add Student:</label>
              <select id="studentDropdown" onchange="addStudent()">
                <option value="">-- Select Student --</option>
                <% uniqueStudents.forEach(student => { %>
                  <option value="<%= student %>"><%= student %></option>
                <% }) %>
              </select>
            </div>
            
            <div class="dropdown-group">
              <label>Add Subject:</label>
              <select id="subjectDropdown" onchange="addSubject()">
                <option value="">-- Select Subject --</option>
                <% uniqueTopics.forEach(topic => { %>
                  <option value="<%= topic %>"><%= topic %></option>
                <% }) %>
              </select>
            </div>
          </div>

          <!-- Selected Items Display -->
          <div class="selected-items">
            <div class="selected-group">
              <h4>Selected Students:</h4>
              <div id="selectedStudents" class="tags-container"></div>
            </div>
            
            <div class="selected-group">
              <h4>Selected Subjects:</h4>
              <div id="selectedSubjects" class="tags-container"></div>
            </div>
          </div>

          <div class="action-buttons">
            <button onclick="clearAllSelections()" style="background: #dc3545;">Clear All</button>
            <button onclick="updateComparison()" style="background: #28a745;">Update Chart</button>
          </div>
        </div>
        
        <div id="comparisonChartContainer" style="margin-top: 20px;">
          <canvas id="comparisonChart" width="800" height="400"></canvas>
        </div>
      </div>

      <!-- Scores Table -->
      <h3>üìã Detailed Scores</h3>
      <table id="scoresTable">
        <thead>
          <tr>
            <th>Username</th>
            <th>Education Level</th>
            <th>Topic</th>
            <th>Individual Scores</th>
            <th>Average Score</th>
          </tr>
        </thead>
        <tbody>
          <% scores.forEach(s => { %>
            <tr>
              <td><%= s.username %></td>
              <td><%= s.educationLevel %></td>
              <td><%= s.topic %></td>
              <td><%= s.scores.join(", ") %></td>
              <td><strong><%= s.avgScore %></strong></td>
            </tr>
          <% }) %>
        </tbody>
      </table>

      <!-- Leaderboard -->
      <div class="leaderboard">
        <h3>üèÜ Top Performers</h3>
        <ol>
          <% 
          const sortedScores = scores.sort((a,b) => b.avgScore - a.avgScore).slice(0, 10);
          sortedScores.forEach(s => { 
          %>
            <li><strong><%= s.username %></strong> - <%= s.topic %> : <%= s.avgScore %>%</li>
          <% }) %>
        </ol>
      </div>

    <% } else { %>
      <div class="no-data">
        <h3>No scores available for the current filter.</h3>
        <p>Try adjusting your filter criteria or check if data has been recorded.</p>
      </div>
    <% } %>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Pass server data to JavaScript
    const scoresData = <%- JSON.stringify(scores) %>;
    const uniqueTopics = <%- JSON.stringify(uniqueTopics) %>;
    const uniqueStudents = <%- JSON.stringify(uniqueStudents) %>;
    
    let scoreChart, topicChart, comparisonChart;

    // Initialize charts
    function initializeCharts() {
      // Main Score Chart
      const ctx1 = document.getElementById('scoreChart').getContext('2d');
      scoreChart = new Chart(ctx1, {
        type: 'bar',
        data: {
          labels: scoresData.map(s => s.username + " (" + s.topic + ")"),
          datasets: [{
            label: 'Average Score',
            data: scoresData.map(s => parseFloat(s.avgScore)),
            backgroundColor: 'rgba(54, 162, 235, 0.8)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              max: 100
            }
          }
        }
      });

      // Topic Performance Chart
      const topicData = {};
      scoresData.forEach(s => {
        if (!topicData[s.topic]) {
          topicData[s.topic] = [];
        }
        topicData[s.topic].push(parseFloat(s.avgScore));
      });

      const topicAvgs = Object.keys(topicData).map(topic => {
        const avg = topicData[topic].reduce((a, b) => a + b, 0) / topicData[topic].length;
        return { topic, avg: avg.toFixed(2) };
      });

      const ctx2 = document.getElementById('topicChart').getContext('2d');
      topicChart = new Chart(ctx2, {
        type: 'doughnut',
        data: {
          labels: topicAvgs.map(t => t.topic),
          datasets: [{
            data: topicAvgs.map(t => parseFloat(t.avg)),
            backgroundColor: [
              'rgba(255, 99, 132, 0.8)',
              'rgba(54, 162, 235, 0.8)',
              'rgba(255, 205, 86, 0.8)',
              'rgba(75, 192, 192, 0.8)',
              'rgba(153, 102, 255, 0.8)',
              'rgba(255, 159, 64, 0.8)'
            ]
          }]
        },
        options: {
          responsive: true
        }
      });

      // Comparison Chart
      const ctx3 = document.getElementById('comparisonChart').getContext('2d');
      comparisonChart = new Chart(ctx3, {
        type: 'bar',
        data: {
          labels: [],
          datasets: []
        },
        options: {
          responsive: true,
          plugins: {
            title: {
              display: true,
              text: 'Student Performance Comparison'
            },
            legend: {
              position: 'top'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              title: {
                display: true,
                text: 'Average Score (%)'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Topics'
              }
            }
          },
          interaction: {
            intersect: false,
            mode: 'index'
          }
        }
      });
    }

    function updateCharts() {
      const selectedTopic = document.getElementById('topicSelect').value;
      const selectedStudent = document.getElementById('studentSelect').value;
      
      let filteredData = scoresData;
      if (selectedTopic) {
        filteredData = filteredData.filter(s => s.topic === selectedTopic);
      }
      if (selectedStudent) {
        filteredData = filteredData.filter(s => s.username === selectedStudent);
      }
      
      // Update main chart
      scoreChart.data.labels = filteredData.map(s => s.username + " (" + s.topic + ")");
      scoreChart.data.datasets[0].data = filteredData.map(s => parseFloat(s.avgScore));
      scoreChart.update();
    }

    // Global arrays to store selected items
    let selectedStudents = [];
    let selectedSubjects = [];

    function addStudent() {
      const dropdown = document.getElementById('studentDropdown');
      const student = dropdown.value;
      
      if (student && !selectedStudents.includes(student)) {
        selectedStudents.push(student);
        updateSelectedDisplay();
        dropdown.value = ''; // Reset dropdown
      }
    }

    function addSubject() {
      const dropdown = document.getElementById('subjectDropdown');
      const subject = dropdown.value;
      
      if (subject && !selectedSubjects.includes(subject)) {
        selectedSubjects.push(subject);
        updateSelectedDisplay();
        dropdown.value = ''; // Reset dropdown
      }
    }

    function removeStudent(student) {
      selectedStudents = selectedStudents.filter(s => s !== student);
      updateSelectedDisplay();
    }

    function removeSubject(subject) {
      selectedSubjects = selectedSubjects.filter(s => s !== subject);
      updateSelectedDisplay();
    }

    function updateSelectedDisplay() {
      // Update students display
      const studentsContainer = document.getElementById('selectedStudents');
      studentsContainer.innerHTML = '';
      
      if (selectedStudents.length === 0) {
        studentsContainer.innerHTML = '<span style="color: #666; font-style: italic;">No students selected</span>';
      } else {
        selectedStudents.forEach(student => {
          const tag = document.createElement('div');
          tag.className = 'tag';
          tag.innerHTML = `
            ${student}
            <button class="remove-btn" onclick="removeStudent('${student}')" title="Remove ${student}">√ó</button>
          `;
          studentsContainer.appendChild(tag);
        });
      }

      // Update subjects display
      const subjectsContainer = document.getElementById('selectedSubjects');
      subjectsContainer.innerHTML = '';
      
      if (selectedSubjects.length === 0) {
        subjectsContainer.innerHTML = '<span style="color: #666; font-style: italic;">No subjects selected</span>';
      } else {
        selectedSubjects.forEach(subject => {
          const tag = document.createElement('div');
          tag.className = 'tag subject';
          tag.innerHTML = `
            ${subject}
            <button class="remove-btn" onclick="removeSubject('${subject}')" title="Remove ${subject}">√ó</button>
          `;
          subjectsContainer.appendChild(tag);
        });
      }
    }

    function clearAllSelections() {
      selectedStudents = [];
      selectedSubjects = [];
      updateSelectedDisplay();
      
      // Clear comparison chart
      comparisonChart.data.labels = [];
      comparisonChart.data.datasets = [];
      comparisonChart.update();
    }

    function updateComparison() {
      if (selectedStudents.length === 0 || selectedSubjects.length === 0) {
        alert('Please select at least one student and one subject to compare.');
        return;
      }

      const datasets = [];
      const colors = [
        'rgba(255, 99, 132, 0.8)',
        'rgba(54, 162, 235, 0.8)',
        'rgba(255, 205, 86, 0.8)',
        'rgba(75, 192, 192, 0.8)',
        'rgba(153, 102, 255, 0.8)',
        'rgba(255, 159, 64, 0.8)',
        'rgba(199, 199, 199, 0.8)',
        'rgba(83, 102, 255, 0.8)',
        'rgba(255, 99, 255, 0.8)',
        'rgba(99, 255, 132, 0.8)'
      ];
      
      selectedStudents.forEach((student, index) => {
        const studentData = selectedSubjects.map(subject => {
          const score = scoresData.find(s => s.username === student && s.topic === subject);
          return score ? parseFloat(score.avgScore) : 0;
        });
        
        datasets.push({
          label: student,
          data: studentData,
          backgroundColor: colors[index % colors.length],
          borderColor: colors[index % colors.length].replace('0.8', '1'),
          borderWidth: 1,
          borderRadius: 4,
          borderSkipped: false,
        });
      });
      
      comparisonChart.data.labels = selectedSubjects;
      comparisonChart.data.datasets = datasets;
      comparisonChart.update();
    }

    // Initialize charts when page loads
    window.addEventListener('load', function() {
      initializeCharts();
      updateSelectedDisplay(); // Initialize empty displays
    });
  </script>
</body>
</html>